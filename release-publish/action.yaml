name: 'Prepare release'
description: 'Check for release tag and prepare release'

# Set inputs
inputs:
  branch:
    required: false
    type: string
    default: "production"

  staging_branch:
    required: false
    type: string
    default: "staging"
  
  development_branch:
    required: false
    type: string
    default: "dev"

  package:
    required: false
    type: string
    default: ""

  directories:
    required: false
    type: string
    default: "."

  
runs:
  using: "composite"

  steps:

    - name: 'Set ref name'
      id: ref-name
      shell: bash
      run: |
        SEMVER_REGEX="^(v?)(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)"
        if [[ ${{ github.ref_name }} == ${{ inputs.branch }} ]]; then
          echo "REF_NAME=production" >> $GITHUB_ENV
        elif [[ ${{ github.ref_name }} =~ $SEMVER_REGEX ]]; then
          echo "REF_NAME=production" >> $GITHUB_ENV
        elif [[ ${{ github.ref_name }} == ${{ inputs.staging_branch }} ]]; then
          echo "REF_NAME=staging" >> $GITHUB_ENV
        elif [[ ${{ github.ref_name }} == ${{ inputs.development_branch }} ]]; then
          echo "REF_NAME=dev" >> $GITHUB_ENV
        else
          echo "REF_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo -e "\033[31m Ref ${{ github.ref_name }} does not match production or semver pattern vx.x.x! Aborting build!"
          exit 1
        fi
    
    - name: 'Release - Checkout'
      if: ${{ env.REF_NAME == 'production' && github.event_name == 'release' }}
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: 'Release - Tag checks'
      if: ${{ env.REF_NAME == 'production' && github.event_name == 'release' }}
      shell:  bash
      run: |
        onProductionBranch=false
        branches=$(git branch -r --contains tags/${{ github.ref_name }})
        for branch in $branches; do
          if [[ $branch == "origin/${{ inputs.branch }}" ]]; then
            onProductionBranch=true
          fi
        done
        if [ "$onProductionBranch" == false ]; then
          echo -e "\033[31m Release tag ${{ github.ref_name }} is not on production branch. Aborting release build!"
          exit 1
        fi

    - name: 'Get Tag'
      if: ${{ env.REF_NAME == 'production' && github.event_name == 'release' }}
      id: get-tag
      shell: bash
      run: |
        echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV

    - name: 'Set up node'
      if: ${{ env.REF_NAME == 'production' && github.event_name == 'release' && inputs.package == 'npm' }}
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: 'Update package.json with the new tag'
      if: ${{ env.REF_NAME == 'production' && github.event_name == 'release' && inputs.package == 'npm' }}
      shell: bash
      run: |
        dirs = '${{ inputs.directories }}'
        IFS=',' read -r -a list <<< "$dirs"
        echo "dirs: $list"
        # Creata a list of the directories to update
        directories = $(echo $dirs | tr "," "\n")
        for dir in $list; do
          echo "Updating package.json in $dir"
          cd $dir
          npm version ${{ env.TAG }} --no-git-tag-version
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          cd ..
        done

    - name: 'Update branch with new version'
      if: ${{ env.REF_NAME == 'production' && github.event_name == 'release' && inputs.package == 'npm' }}
      shell: bash
      run: |
        git config --global user.email "github-actions@21.co"
        git config --global user.name "GitHub Actions"
        git add .
        git commit -m "Update package.json version to ${{ env.VERSION }}"
        git push origin ${{ inputs.branch }}